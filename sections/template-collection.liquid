<div class="page-title text-center mt-[30px] mb-[60px] max-w-2xl mx-auto flex flex-col justify-center items-center">
  <h1 class="text-[23px] font-normal text-[#212322] uppercase leading-[1.8] relative pb-3 after:content-[''] after:w-9 after:h-[3px] after:bg-[#db864e] after:absolute after:left-1/2 after:-translate-x-1/2 after:bottom-0">
    {{ collection.title }}
  </h1>
</div>

<button
  class="filter-container flex items-center gap-x-2 cursor-pointer mb-5 mx-[18px] lg:mx-[38px]"
  data-filter-open
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="currentColor"
    class="size-6"
  >
    <path stroke-linecap="round" stroke-linejoin="round"
        d="M10.5 6h9.75M10.5 6a1.5 1.5 0 1 1-3 0m3 0a1.5 1.5 0 1 0-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-9.75 0h9.75" />
  </svg>

  <span class="font-secondary text-base">Filter and sort</span>
</button>

<!-- Overlay + Drawer -->
<div id="filter-root" class="fixed inset-0 z-50 hidden">
  <!-- Overlay -->
  <div class="absolute inset-0 bg-black/30 opacity-0 transition-opacity duration-300" data-filter-overlay></div>

  <!-- Drawer (LEFT) -->
  <div
    data-section-id="{{ section.id }}"
    class="
      absolute left-0 top-0 h-full w-full sm:max-w-md bg-white shadow-xl
      -translate-x-full transition-transform duration-300 flex flex-col will-change-transform
    "
    role="dialog"
    data-filter-drawer
  >
    <!-- Header -->
    <div class="p-5 lg:p-[30px] flex items-center justify-between">
      <h2
        id="filter-title"
        class="text-[18px] font-normal uppercase relative pb-3  after:content-[''] after:w-9 after:h-[3px] after:bg-[#db864e] after:absolute after:left-0 after:-translate-x-0 after:bottom-0"
      >
        Filter and sort
      </h2>

      <button
        class="p-2 -mr-2 hover:opacity-70 cursor-pointer"
        data-filter-close
      >
        <svg viewBox="0 0 24 24" class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="1.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 6l12 12M18 6L6 18" />
        </svg>
      </button>
    </div>

    <!-- Items scroll area -->
    <div class="flex-1 overflow-y-auto p-5 lg:p-[30px]" data-filter-items>
      <!-- … your filter items … -->
      <!-- Sort dropdown -->

      <div class="relative mb-[10px]">
        <label
          for="sort-by"
          class="absolute block left-1 top-[-8px] font-secondary text-xs text-[#212322] mb-1 bg-white z-[1] px-1.5"
          >Sort by</label
        >

        <div class="relative">
          <select
            id="sort-by"
            name="sort_by"
            class="
              w-full font-secondary appearance-none border border-[rgba(33,35,34,0.2)]
              py-3 pl-3 pr-9 text-[15px] text-[#212322]
              focus:outline-none cursor-pointer focus:ring-0
            "
          >
            <option value="manual">Featured</option>
            <option value="best-selling">Best selling</option>
            <option value="price-ascending">Price: low to high</option>
            <option value="price-descending">Price: high to low</option>
          </select>

          <!-- Chevron -->
          <span
            class="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 text-[#212322] opacity-70"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              class="w-4 h-4"
            >
              <path fill-rule="evenodd"
                  d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z"
                  clip-rule="evenodd" />
            </svg>
          </span>
        </div>
      </div>
      {% for filter in collection.filters %}
        <section class="border-t-0 border-[rgba(33,35,34,0.2)] pt-3 mb-4 first:border-t-0" data-acc-root>
          <!-- Title row -->
          <button
            type="button"
            class="w-full flex items-center justify-between gap-4 py-2 text-left"
            data-acc-trigger
          >
            <span class="font-secondary text-base capitalize">{{ filter.label }}</span>
            <span class="shrink-0 transition-transform duration-200 ease-in-out cursor-pointer" data-acc-icon>
              <!-- Plus that rotates to make an X -->
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="1.5"
                class="w-4 h-4"
              >
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15M19.5 12h-15" />
              </svg>
            </span>
          </button>

          <!-- Collapsible content -->
          <div
            class="
              grid gap-3 overflow-hidden transition-[grid-template-rows] duration-300 ease-in-out opacity-0 pointer-events-none
              [grid-template-rows:0fr]
            "
            data-acc-body
          >
            <div class="min-h-0">
              <!-- inner to allow height animation -->
              {% if filter.type == 'list' or filter.type == 'boolean' %}
                {% for value in filter.values %}
                  <!-- Option row -->
                  <div class="grid grid-cols-[auto_1fr_auto] items-center gap-3 py-2">
                    <!-- Checkbox -->
                    <label class="flex items-center gap-2 w-fit">
                      <span class="relative h-5 w-5">
                        <input
                          type="checkbox"
                          id="{{ filter.label | handle }}-{{ value.value | handle }}"
                          name="{{ value.param_name }}"
                          value="{{ value.value }}"
                          data-add-url="{{ value.url_to_add }}"
                          data-remove-url="{{ value.url_to_remove }}"
                          {% if value.active %}
                            checked
                          {% endif %}
                          class="
                            peer cursor-pointer appearance-none h-5 w-5 border border-[#212322]
                            hover:bg-[#212322]/20
                            checked:bg-[#212322] checked:border-[#212322] checked:hover:bg-[#212322]
                            transition-colors duration-200 ease-in-out focus:outline-none
                          "
                        >
                        <!-- Custom checkmark SVG -->
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke-width="3"
                          stroke="white"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          class="
                            absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-3 h-3
                            hidden peer-checked:flex pointer-events-none
                          "
                        >
                          <path d="m4.5 12.75 6 6 9-13.5" />
                        </svg>
                      </span>
                      <span class="text-sm font-secondary">{{ value.label }}</span>
                    </label>
                    <div></div>
                    <span class="text-sm text-[#212322]/80">{{ value.count }}</span>
                  </div>
                {% endfor %}
              {% endif %}
            </div>
          </div>
        </section>
      {% endfor %}
      <!-- One filter block -->
    </div>

    <!-- Footer -->
    <div class="px-5 py-5 border-t border-[rgba(33,35,34,0.2)]">
      <div class="flex gap-3">
        <a
          href="{{ collection.url }}"
          class="flex-1 border border-[rgba(33,35,34,0.4)] uppercase text-sm py-[9px] px-[30px] leading-[30px] text-[rgba(33,35,34,0.8)] text-center"
          >Clear all</a
        >
        
      </div>
    </div>
  </div>
</div>

{% paginate collection.products by 24 %}
  <div
    class="collection-container grid [justify-items:center] grid-cols-1 px-[10px] mx-auto md:grid-cols-2 lg:grid-cols-3 lg:px-[30px] xl:grid-cols-4"
    data-grid-section-id="{{ section.id }}"
    data-section-id="{{ section.id }}"
  >
    {% for product in collection.products %}
      {% render 'product-card', product: product %}
    {% else %}
      <p class="mt-4 mb-6 font-secondary text-center">There are no products in this collection</p>
    {% endfor %}
  </div>

  <div class="mx-auto mt-6 mb-[42px] md:mb-[60px]">
    {% render 'pagination-1', pagination: paginate %}
  </div>
{% endpaginate %}

{% comment %} open/close filter {% endcomment %}
<script>
  // Elements
  const root = document.getElementById('filter-root');
  const overlay = root.querySelector('[data-filter-overlay]');
  const drawer = root.querySelector('[data-filter-drawer]');
  const openers = document.querySelectorAll('[data-filter-open]');
  const closer = root.querySelector('[data-filter-close]');
  const itemsWrap = root.querySelector('[data-filter-items]');

  let scrollY = 0;

  // Open/close
  function openFilter() {
    scrollY = window.scrollY; // store before lock

    // ✅ open all accordions
    document.querySelectorAll('[data-acc-root]').forEach((el) => el._accOpen?.());

    // Lock body (iOS-safe)
    document.body.style.position = 'fixed';
    document.body.style.top = `-${scrollY}px`;
    document.body.style.left = '0';
    document.body.style.right = '0';
    document.body.style.overflow = 'hidden';
    document.body.style.width = '100%';

    root.classList.remove('hidden');
    requestAnimationFrame(() => {
      overlay.classList.remove('opacity-0');
      drawer.classList.remove('-translate-x-full'); // ▶ slide IN from left
    });
  }

  function closeFilter() {
    // Unlock body
    document.body.style.position = '';
    document.body.style.top = '';
    document.body.style.left = '';
    document.body.style.right = '';
    document.body.style.overflow = '';
    document.body.style.width = '';

    // Restore scroll
    window.scrollTo(0, scrollY);

    overlay.classList.add('opacity-0');
    drawer.classList.add('-translate-x-full'); // ◀ slide OUT to left
    setTimeout(() => root.classList.add('hidden'), 300);
  }

  openers.forEach((btn) =>
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      openFilter();
    })
  );
  overlay.addEventListener('click', closeFilter);
  closer.addEventListener('click', closeFilter);
  document.addEventListener(
    'keydown',
    (e) => e.key === 'Escape' && !root.classList.contains('hidden') && closeFilter()
  );

  // (Optional) prevent scroll inside drawer from propagating on iOS
  itemsWrap?.addEventListener('touchmove', (e) => e.stopPropagation(), { passive: true });
</script>

{% comment %} Accordion {% endcomment %}
<script>
  document.querySelectorAll('[data-acc-root]').forEach((root) => {
    const trigger = root.querySelector('[data-acc-trigger]');
    const body = root.querySelector('[data-acc-body]');
    const icon = root.querySelector('[data-acc-icon]'); // ← the <span> around the SVG

    const isOpen = () => !body.classList.contains('opacity-0');
    const open = () => {
      body.style.setProperty('grid-template-rows', '1fr');
      body.classList.remove('opacity-0', 'pointer-events-none');
      body.classList.add('opacity-100');
      icon?.classList.add('rotate-45');
      trigger?.setAttribute('aria-expanded', 'true');
    };
    const close = () => {
      body.style.setProperty('grid-template-rows', '0fr');
      body.classList.add('opacity-0', 'pointer-events-none');
      body.classList.remove('opacity-100');
      icon?.classList.remove('rotate-45');
      trigger?.setAttribute('aria-expanded', 'false');
    };
    const toggle = () => (isOpen() ? close() : open());

    // start open
    open();

    // header button toggles
    trigger?.addEventListener('click', (e) => {
      e.preventDefault();
      toggle();
    });

    // ✅ icon toggles too; stop bubbling so it doesn't double-trigger the header button
    if (icon) {
      icon.setAttribute('role', 'button');
      icon.setAttribute('tabindex', '0');
      icon.style.cursor = 'pointer';

      const onIcon = (e) => {
        e.preventDefault();
        e.stopPropagation(); // important
        toggle();
      };
      icon.addEventListener('click', onIcon);
      icon.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') onIcon(e);
      });
    }
  });
</script>

{% comment %} Checkboxes {% endcomment %}

<script>
  (() => {
    const PREVIEW_KEYS = ['preview_theme_id', '_fd', 'pb'];

    const gridEl = document.querySelector('.collection-container');
    if (!gridEl) return;
    const gridSectionId = gridEl.dataset.gridSectionId || gridEl.dataset.sectionId;

    const fetchAndSwap =
      window.__fetchAndSwap__ ||
      function (targetUrl) {
        const fetchUrl = new URL(targetUrl.pathname, window.location.origin);
        const fetchParams = new URLSearchParams(targetUrl.search);
        fetchParams.set('section_id', gridSectionId);
        fetchUrl.search = fetchParams.toString();

        gridEl.setAttribute('aria-busy', 'true');
        fetch(fetchUrl.toString())
          .then((r) => r.text())
          .then((html) => {
            const temp = document.createElement('div');
            temp.innerHTML = html;
            const next = temp.querySelector('.collection-container');
            if (next) gridEl.innerHTML = next.innerHTML;
            window.history.pushState({}, '', targetUrl.toString());
          })
          .catch(console.error)
          .finally(() => gridEl.removeAttribute('aria-busy'));
      };

    const select = document.getElementById('sort-by');
    if (!select) return;

    const current = new URL(window.location.href);
    const currentSort = current.searchParams.get('sort_by') || select.dataset.defaultSort || 'manual';
    select.value = currentSort === 'featured' ? 'manual' : currentSort;

    // ------- SORT CHANGE (already working) -------
    select.addEventListener('change', () => {
      const rawValue = select.value;
      const sortValue = rawValue === 'featured' ? 'manual' : rawValue;

      const target = new URL(window.location.href);

      PREVIEW_KEYS.forEach((k) => {
        if (!target.searchParams.has(k) && current.searchParams.has(k)) {
          target.searchParams.set(k, current.searchParams.get(k));
        }
      });

      target.searchParams.set('sort_by', sortValue);
      target.searchParams.delete('page');

      fetchAndSwap(target);
    });

    // ------- FILTER CHECKBOXES (the missing piece) -------
    document.querySelectorAll('input[type="checkbox"][data-add-url][data-remove-url]').forEach((input) => {
      input.addEventListener('change', () => {
        // Pick the URL Shopify gave you for this state
        const urlStr = input.checked ? input.dataset.addUrl : input.dataset.removeUrl;

        // Build a URL we can tweak
        const target = new URL(urlStr, window.location.origin);

        // Preserve preview params and current sort choice
        PREVIEW_KEYS.forEach((k) => {
          if (!target.searchParams.has(k) && current.searchParams.has(k)) {
            target.searchParams.set(k, current.searchParams.get(k));
          }
        });

        const sortValue = current.searchParams.get('sort_by') || select.value || 'manual';
        if (!target.searchParams.has('sort_by') && sortValue) {
          target.searchParams.set('sort_by', sortValue === 'featured' ? 'manual' : sortValue);
        }

        // Reset to first page when filters change
        target.searchParams.delete('page');

        fetchAndSwap(target);
      });
    });

    // Keep grid in sync with back/forward
    window.addEventListener('popstate', () => {
      fetchAndSwap(new URL(window.location.href));
    });
  })();
</script>

<style>
  /* optional loading hint */
  .collection-container[aria-busy='true'] {
    opacity: 0.6;
    pointer-events: none;
  }
</style>
