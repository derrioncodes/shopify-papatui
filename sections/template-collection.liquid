<div class="collection-container grid [justify-items:center] grid-cols-1 px-[10px] mx-auto md:grid-cols-2 lg:grid-cols-3 lg:px-[30px] xl:grid-cols-4">
  {% for product in collection.products %}
    <div class="product-card px-2 mb-[30px] md:mb-9 relative">
      <div class="product-card__top">
        <a class="block" href="{{ product.url }}">
          <ul
            class="product-card__label absolute flex flex-col z-[3] top-[15px] right-0 mb-0 text-right items-end"
          >
            <li class="product-card__label-li w-fit mb-1 bg-[#e5e5e5] px-[10px] py-1">
              <p class="product-card__label-text text-black tracking-[1px] uppercase text-[10px]">Best Seller</p>
            </li>
          </ul>
          {% if product.images.size > 0 %}
            <div class="product-card__image relative group w-full overflow-hidden">
              <!-- First Image -->
              <img
                class="w-full h-full object-contain transition-opacity duration-300 ease-in-out group-hover:opacity-0"
                src="{{ product.images[0] | image_url }}"
                alt="{{ product.images[0].alt }}"
              >

              {% if product.images.size > 1 %}
                <!-- Second Image (shown on hover) -->
                <img
                  class="w-full h-full object-contain absolute top-0 left-0 opacity-0 transition-opacity duration-300 ease-in-out group-hover:opacity-100"
                  src="{{ product.images[1] | image_url }}"
                  alt="{{ product.images[1].alt }}"
                >
              {% endif %}
            </div>
          {% else %}
            {{ 'product-1' | placeholder_svg_tag: 'w-full h-full object-contain bg-gray-100' }}
          {% endif %}
        </a>
        {% if product.available %}
          <button
            data-variant-id="{{ product.variants.first.id }}"
            type="button"
            class="product-cart__button block w-full border border-[#212322] mt-3 text-center m-0 cursor-pointer tracking-[1px] uppercase leading-[30px] py-[9px] px-[30px] text-[13px] transition-all duration-200 ease-in-out hover:bg-[#212121] hover:text-white"
          >
            Add to cart
          </button>
        {% else %}
          <button
            data-variant-id="{{ product.variants.first.id }}"
            type="button"
            aria-disabled="true"
            disabled
            class="product-cart__button block w-full border border-[#212322] cursor-not-allowed opacity-60 mt-3 text-center m-0 pointer-events-none tracking-[1px] uppercase leading-[30px] py-[9px] px-[30px] text-[13px]"
          >
            Sold out
          </button>
        {% endif %}
      </div>

      <div class="product-card__bottom mt-3">
        <a class="block hover:opacity-70 transition-opacity duration-200 ease-in-out" href="{{ product.url }}">
          <p
            class="product__micro-copy font-secondary tracking-[1px] leading-[1.3] text-[rgba(33,35,34,0.55)] mb-[6px] text-[0.9rem]"
          >
            Unscented
          </p>
          <h3 class="product__title leading-[1.3] text-[16px] tracking-[1px] font-secondary capitalize">
            {{ product.title }}
          </h3>
          <p class="product__price mt-1.5 font-bold tracking-[1px] font-secondary">{{ product.price | money }}</p>
        </a>
      </div>
    </div>

  {% else %}
    <p class="mt-4 mb-6 font-secondary text-center">There are no products in this collection</p>
  {% endfor %}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const addToCartButtons = document.querySelectorAll('.product-cart__button');

    addToCartButtons.forEach((button) => {
      // Skip disabled buttons
      if (button.disabled) return;

      button.addEventListener('click', async () => {
        const variantId = button.getAttribute('data-variant-id');
        if (!variantId) return;

        try {
          // Add to cart
          await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Accept: 'application/json',
            },
            body: JSON.stringify({
              id: variantId,
              quantity: 1,
            }),
          });

          // Update cart count
          const cartResponse = await fetch('/cart.js');
          const cartData = await cartResponse.json();

          const cartCountEl = document.getElementById('CartCount');
          if (cartCountEl) {
            cartCountEl.textContent = cartData.item_count;
          }

          // Show toast (optional)
          showCartToast();
        } catch (error) {
          console.error('Error adding to cart:', error);
        }
      });
    });
  });

  function showCartToast(message = 'Added to cart') {
    const toast = document.getElementById('cart-toast');
    if (!toast) return;

    toast.textContent = message;
    toast.classList.remove('opacity-0', 'pointer-events-none');
    toast.classList.add('opacity-100');

    setTimeout(() => {
      toast.classList.remove('opacity-100');
      toast.classList.add('opacity-0', 'pointer-events-none');
    }, 2500);
  }
</script>
