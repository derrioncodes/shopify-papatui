<div class="page-title text-center mt-[30px] mb-[24px] max-w-2xl mx-auto flex flex-col justify-center items-center">
  <h1 class="text-[23px] font-normal text-[#212322] uppercase leading-[1.8] relative pb-3 after:content-[''] after:w-9 after:h-[3px] after:bg-[#db864e] after:absolute after:left-1/2 after:-translate-x-1/2 after:bottom-0">
    Search Results
  </h1>
</div>

<form
  action="{{ routes.search_url }}"
  method="get"
  class="w-full max-w-[600px] mx-auto mb-[42px] px-[18px] "
>
  <div class="border border-[rgba(33,35,34,0.2)]">
    <div class="relative w-full">
      <input
        type="search"
        name="q"
        placeholder="Search our store..."
        class="
          w-full h-[54px] pl-[12px] pr-[40px] py-[12px]
          text-[1.2rem] leading-[32px] m-0 text-base tracking-[1px]
          block outline-0 placeholder:text-[rgba(33,33,33,0.5)]
          font-secondary placeholder:tracking-[1px]
        "
        value="{{ search.terms | escape }}"
      >

      <button
        type="submit"
        class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-600 cursor-pointer hover:text-black"
      >
        <!-- SEARCH ICON -->
        {% render 'icon-search' %}
      </button>
    </div>

    <div class="search-suggestions hidden pl-1.5 mt-[30px] pb-[30px] h-full max-h-[320px] overflow-y-auto">
      <h4 class="text-sm uppercase mb-1.5 pl-1.5 tracking-[1px] leading-loose font-secondary">Products</h4>
      <ul>
        
      </ul>
    </div>
    <div class="search-suggestions_btn sticky bottom-0 left-0 right-0 bg-white/95 backdrop-blur border-t border-[rgba(33,33,33,0.2)]">
      <div class="w-full mx-auto px-[24px] py-[18px]">
        <button
          type="submit"
          class="py-[9px] px-[18px] w-full bg-[#d6d2c4] text-[#3e4827] uppercase text-sm leading-[30px] tracking-[1px] transition-all duration-200 ease-in-out hover:bg-[#ccc7b5] cursor-pointer "
        >
          Search
        </button>
      </div>
    </div>
  </div>
</form>

<div class="text-[18px] font-secondary text-center mb-[60px]">{{ search.results_count }} results</div>

{% if search.performed %}
  {% if search.results.size > 0 %}
    <div class="collection-container grid [justify-items:center] grid-cols-1 px-[10px] mx-auto md:grid-cols-2 lg:grid-cols-3 lg:px-[30px] xl:grid-cols-4">
      {% for item in search.results %}
        {% case item.object_type %}
          {% when 'product' %}
            {% render 'product-card', product: item %}

          {% when 'page' %}
            <div class="product-card px-2 mb-[30px] md:mb-9 relative">
              <div class="product-card__top">
                <a class="block" href="{{ item.url }}">
                  <ul
                    class="product-card__label absolute flex flex-col z-[3] top-[15px] right-0 mb-0 text-right items-end"
                  >
                    <li class="product-card__label-li w-fit mb-1 bg-[#d6d2c4] px-[10px] py-1">
                      <p class="product-card__label-text text-black tracking-[1px] uppercase text-[10px]">Page</p>
                    </li>
                  </ul>
                  <div class="product-card__image relative group">
                    <img
                      class="w-full h-full object-contain"
                      src="{{ 'gray-square.jpg' | asset_url }}"
                      alt="{{ item.title }}"
                    >

                    <svg
                      cl
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="1.5"
                      stroke="currentColor"
                      class="w-[150px]  block absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round"
                          d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                    </svg>
                    <div class="absolute bottom-0 w-full py-[18px] px-6 bg-[#f0f0f0] group-hover:underline">
                      <h2 class="text-[#3e4827] uppercase">{{ item.title }}</h2>
                    </div>
                  </div>
                </a>
              </div>
            </div>

          {% else %}

        {% endcase %}

      {% else %}

      {% endfor %}
    </div>
  {% else %}
    <p class="mt-4 mb-6 font-secondary text-center">No results found for the search term: {{ search.terms }}</p>
  {% endif %}
{% endif %}

<style>
  /* Chrome / Safari / Edge (Chromium) */
  input[type='search']::-webkit-search-cancel-button,
  input[type='search']::-webkit-search-decoration,
  input[type='search']::-webkit-search-results-button,
  input[type='search']::-webkit-search-results-decoration {
    -webkit-appearance: none;
    appearance: none;
    display: none;
  }

  /* Legacy Edge / IE */
  input[type='search']::-ms-clear,
  input[type='search']::-ms-reveal {
    display: none;
    width: 0;
    height: 0;
  }
</style>

{% comment %}
  <script>
    (() => {
      const MIN_CHARS = 2;
      const FETCH_LIMIT = 6;

      const esc = (s) =>
        s.replace(/[&<>"']/g, (m) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[m]));

      function money(cents) {
        try {
          if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
            return Shopify.formatMoney(cents, (window.theme && theme.moneyFormat) || '${{amount}}');
          }
        } catch (e) {}
        return (Number(cents || 0) / 100).toLocaleString(undefined, {
          style: 'currency',
          currency: '{{ shop.currency }}',
        });
      }

      function toCents(raw) {
        if (raw == null) return null;
        if (typeof raw === 'number') return raw;
        if (typeof raw === 'string') {
          const n = parseFloat(raw.replace(/[^\d.]/g, ''));
          return Number.isFinite(n) ? Math.round(n * 100) : null;
        }
        return null;
      }

      async function fetchProducts(q) {
        const url =
          `/search/suggest.json?q=${encodeURIComponent(q)}` +
          `&resources[type]=product` +
          `&resources[limit]=${FETCH_LIMIT}` +
          `&resources[options][unavailable_products]=last`;
        const res = await fetch(url, { headers: { Accept: 'application/json' } });
        if (!res.ok) return [];
        const data = await res.json();
        return data?.resources?.results?.products || [];
      }

      function renderProducts(container, products, q) {
        if (!container) return;

        if (!products.length) {
          container.innerHTML = `
            <li class="text-xs tracking-[1px] opacity-70 px-1.5 py-[9px]">No products found</li>
            <li class="text-xs tracking-[1px]">
              <a class="py-[3px] px-1.5 block w-full rounded hover:bg-[rgba(33,35,34,0.1)] leading-normal font-secondary"
                 href="{{ routes.search_url }}?q=${encodeURIComponent(q)}&type=product">View all results</a>
            </li>`;
          return;
        }

        container.innerHTML = products
          .map((prod) => {
            const rawImg =
              prod.image ||
              (prod.images && prod.images[0]) ||
              (prod.featured_image && (prod.featured_image.url || prod.featured_image.src));
            const imgURL = typeof rawImg === 'string' ? rawImg : rawImg && (rawImg.url || rawImg.src);

            let cents = toCents(prod.price_min);
            if (cents == null) cents = toCents(prod.price);
            if (cents == null && prod.variants?.[0]?.price != null) cents = toCents(prod.variants[0].price);

            return `
            <li class="text-xs tracking-[1px]">
              <a href="${
                prod.url
              }" class="flex gap-x-[18px] px-1.5 py-[9px] rounded hover:bg-[rgba(33,35,34,0.1)] cursor-pointer">
                ${
                  imgURL
                    ? `<img class="w-[72px] h-[72px] block object-cover" src="${imgURL}" alt="${esc(prod.title || '')}">`
                    : ''
                }
                <div>
                  <span class="py-[3px] block w-full leading-normal font-secondary capitalize">${esc(prod.title)}</span>
                  ${
                    cents != null
                      ? `<span class="py-[3px] block w-full leading-normal font-secondary capitalize">${money(
                          cents
                        )}</span>`
                      : ''
                  }
                </div>
              </a>
            </li>`;
          })
          .join('');
      }

      const debounce = (fn, ms) => {
        let t;
        return (...a) => {
          clearTimeout(t);
          t = setTimeout(() => fn(...a), ms);
        };
      };

      const onType = debounce(async (e) => {
        if (!(e.target instanceof HTMLInputElement) || e.target.name !== 'q') return;
        const q = (e.target.value || '').trim();
        const container = e.target.closest('form')?.querySelector('.search-suggestions ul');
        if (!container) return;

        if (q.length < MIN_CHARS) {
          container.innerHTML = '';
          return;
        }

        const products = await fetchProducts(q);
        renderProducts(container, products, q);
      }, 160);

      document.addEventListener('input', onType);
    })();
  </script>
{% endcomment %}

<script>
  (() => {
    const MIN_CHARS = 2;
    const FETCH_LIMIT = 6;

    const esc = (s) =>
      s.replace(/[&<>"']/g, (m) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[m]));

    function money(cents) {
      try {
        if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
          return Shopify.formatMoney(cents, (window.theme && theme.moneyFormat) || '${{amount}}');
        }
      } catch (e) {}
      return (Number(cents || 0) / 100).toLocaleString(undefined, {
        style: 'currency',
        currency: '{{ shop.currency }}',
      });
    }

    function toCents(raw) {
      if (raw == null) return null;
      if (typeof raw === 'number') return raw;
      if (typeof raw === 'string') {
        const n = parseFloat(raw.replace(/[^\d.]/g, ''));
        return Number.isFinite(n) ? Math.round(n * 100) : null;
      }
      return null;
    }

    async function fetchProducts(q) {
      const url =
        `/search/suggest.json?q=${encodeURIComponent(q)}` +
        `&resources[type]=product` +
        `&resources[limit]=${FETCH_LIMIT}` +
        `&resources[options][unavailable_products]=last`;
      const res = await fetch(url, { headers: { Accept: 'application/json' } });
      if (!res.ok) return [];
      const data = await res.json();
      return data?.resources?.results?.products || [];
    }

    function renderProducts(container, products, q) {
      if (!container) return;

      if (!products.length) {
        container.innerHTML = `
          <li class="text-xs tracking-[1px] text-center opacity-70 px-1.5 py-[18px]">
            No products found. Try another search term.
          </li>`;
        return;
      }

      container.innerHTML = products
        .map((prod) => {
          const rawImg =
            prod.image ||
            (prod.images && prod.images[0]) ||
            (prod.featured_image && (prod.featured_image.url || prod.featured_image.src));
          const imgURL = typeof rawImg === 'string' ? rawImg : rawImg && (rawImg.url || rawImg.src);

          let cents = toCents(prod.price_min);
          if (cents == null) cents = toCents(prod.price);
          if (cents == null && prod.variants?.[0]?.price != null) cents = toCents(prod.variants[0].price);

          return `
          <li class="text-xs tracking-[1px]">
            <a href="${
              prod.url
            }" class="flex gap-x-[18px] px-1.5 py-[9px] rounded hover:bg-[rgba(33,35,34,0.1)] cursor-pointer">
              ${
                imgURL
                  ? `<img class="w-[72px] h-[72px] block object-cover" src="${imgURL}" alt="${esc(prod.title || '')}">`
                  : ''
              }
              <div>
                <span class="py-[3px] block w-full leading-normal font-secondary capitalize">${esc(prod.title)}</span>
                ${
                  cents != null
                    ? `<span class="py-[3px] block w-full leading-normal font-secondary capitalize">${money(
                        cents
                      )}</span>`
                    : ''
                }
              </div>
            </a>
          </li>`;
        })
        .join('');
    }

    const debounce = (fn, ms) => {
      let t;
      return (...a) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...a), ms);
      };
    };

    const onType = debounce(async (e) => {
      if (!(e.target instanceof HTMLInputElement) || e.target.name !== 'q') return;
      const q = (e.target.value || '').trim();

      const form = e.target.closest('form');
      const container = form?.querySelector('.search-suggestions ul');
      const suggestionsDiv = form?.querySelector('.search-suggestions'); // wrapper
      const stickyBtn = form?.querySelector('.search-suggestions_btn'); // sticky button wrapper

      if (!container || !suggestionsDiv || !stickyBtn) return;

      if (q.length < MIN_CHARS) {
        container.innerHTML = '';
        suggestionsDiv.classList.add('hidden');
        stickyBtn.classList.add('hidden');
        return;
      }

      const products = await fetchProducts(q);
      renderProducts(container, products, q);

      // Show wrappers now
      suggestionsDiv.classList.remove('hidden');
      stickyBtn.classList.remove('hidden');
    }, 160);

    document.addEventListener('input', onType);
  })();
</script>
