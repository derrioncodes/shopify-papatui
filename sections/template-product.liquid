<!-- START OF SINGLE PRODUCT -->
<section class="px-[18px] mb-6 lg:mb-16 lg:px-[30px] max-w-[1900px] mx-auto">
  <div class="single-product__container mt-8 lg:flex">
    <div
      class="product-media w-full mb-8 md:flex md:flex-row-reverse md:items-start md:gap-4 lg:w-[60%] lg:mr-10"
    >
      <div class="main-image__wrapper relative group">
        <!-- Prev arrow -->
        <button
          type="button"
          class="main-arrow prev absolute top-1/2 left-4 -translate-y-1/2 z-10 bg-white shadow-md w-[48px] h-[48px] flex items-center justify-center cursor-pointer pointer-events-none group-hover:pointer-events-auto opacity-0 group-hover:opacity-100 transition-opacity duration-300"
          aria-label="Previous image"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-6 h-6"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
          </svg>
        </button>

        <div class="main-display"></div>
        <!-- Next arrow -->
        <button
          type="button"
          class="main-arrow next absolute top-1/2 right-4 -translate-y-1/2 z-10 bg-white shadow-md w-[48px] h-[48px] flex items-center justify-center cursor-pointer pointer-events-none group-hover:pointer-events-auto opacity-0 group-hover:opacity-100 transition-opacity duration-300"
          aria-label="Next image"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-6 h-6"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
        </button>
      </div>

      <!-- Thumbs -->
      <div
        class="
          product-thumbs mt-4 relative
          md:grid md:grid-rows-[auto_1fr_auto] md:gap-2 md:items-centerX md:justify-items-center md:mt-3 md:flex-none
        "
      >
        <!-- left arrow -->
        <button
          type="button"
          class="
            thumb-arrow prev absolute top-1/2 -translate-y-1/2 left-0 z-10
            md:static md:translate-y-0 md:left-auto md:z-auto md:rotate-[90deg]
          "
          aria-label="Prev thumbnails"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="size-6"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
          </svg>
        </button>

        <!-- Viewport wraps the UL so only this area scrolls at md+ -->
        <div
          class="
            thumbs-viewport scrollbar-hide w-[80%] mx-auto overflow-x-auto overflow-y-hidden
            md:overflow-x-hidden md:overflow-y-auto md:w-fit
          "
        >
          <ul
            class="
              thumbnails__wrapper my-[18px] flex gap-2
              md:my-0 md:flex-col
            "
          >
            {% for media in product.media %}
              <li class="thumbnail md:flex-none md:w-[70px]">
                {% render 'product-media', media: media %}

                
              </li>
            {% endfor %}
          </ul>
        </div>

        <!-- right arrow -->
        <button
          type="button"
          class="
            thumb-arrow next absolute top-1/2 -translate-y-1/2 right-0 z-10
            md:static md:translate-y-0 md:right-auto md:z-auto md:rotate-[90deg]
          "
          aria-label="Next thumbnails"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="size-6"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
        </button>
      </div>
    </div>

    <div class="details w-full max-w-[640px] mx-auto lg:w-[40%]">
      <h1 class="mb-4 text-2xl uppercase">Rejuvenating Facial Toner</h1>
      <p class="product-price mt-[12px] mb-[12px] text-xl leading-[1.4] font-secondary">$10.00</p>
      <div class="spacer border-b border-[rgba(33,35,34,0.2)] pt-[6px] mb-[24px]"></div>
      <div class="product-options flex mb-[24px]">
        <div class="uppercase text-xs mr-3 mt-2.5 font-secondary tracking-[1px]">Scent:</div>
        <div class="variants flex flex-wrap gap-1.5">
          <div
            class="variant font-secondary text-xs px-4 py-2 border border-[#212322] w-fit shadow-[0_0_3px_1px_rgba(33,35,34,0.2)] cursor-pointer hover:shadow-[0_0_3px_1px_rgba(33,35,34,0.2)]"
          >
            Lush Coconut
          </div>
          <div
            class="variant font-secondary text-xs w-fit px-4 py-2 border border-[rgba(33,35,34,0.2)] cursor-pointer hover:shadow-[0_0_3px_1px_rgba(33,35,34,0.2)] hover:border-[#212322]"
          >
            Sandalwood Suede
          </div>
          <div
            class="variant font-secondary text-xs w-fit px-4 py-2 border border-[rgba(33,35,34,0.2)] cursor-pointer hover:shadow-[0_0_3px_1px_rgba(33,35,34,0.2)] hover:border-[#212322]"
          >
            Cedar Sport
          </div>
        </div>
      </div>

      <p class="mb-[0.75em] text-[12px] uppercase tracking-[1px] font-secondary">Quantity</p>
      <div
        class="item__quantity flex flex-wrap gap-[12px] items-center justify-start w-full mb-6"
        style="grid-area: 2 / 2;"
      >
        <div class="item__quantity__input flex border border-[rgba(33,35,34,0.2)]">
          <button
            class="input__minus text-[0.865rem] w-[1.9rem] h-[1.9rem] relative outline-offset-[-3px] cursor-pointer bg-transparent p-0 text-center border-0 m-0 inline-block leading-none touch-manipulation"
          >
            -
          </button>
          <input
            type="number"
            value="1"
            min="0"
            autocomplete="off"
            step="1"
            name="item-quantity"
            class="outline-offset-[-3px] p-0 rounded-none bg-transparent cursor-text border-l border-r border-t-0 border-b-0 border-[rgba(33,35,34,0.2)] text-center m-0 relative inline-block leading-none touch-manipulation align-middle w-[2.375rem] h-[1.9rem] text-[#212121] text-[0.865rem] appearance-none"
          >
          <button
            class="input__plus text-[0.865rem] w-[1.9rem] h-[1.9rem] relative outline-offset-[-3px] cursor-pointer bg-transparent p-0 text-center border-0 m-0 inline-block leading-none touch-manipulation"
          >
            +
          </button>
        </div>
      </div>
      <button
        class="py-[9px] px-[18px] mb-6 text-center w-full bg-[#d6d2c4] text-[#3e4827] uppercase text-xs leading-[30px] tracking-[1px] transition-all duration-200 ease-in-out hover:bg-[#ccc7b5] cursor-pointer"
      >
        Add to cart
      </button>
      <div class="spacer border-b border-[rgba(33,35,34,0.2)] pt-[6px] mb-[24px]"></div>
      <div class="product-description">
        <h3 class="mb-[3px] font-medium uppercase text-[18px] leading-[1.7]">Product Description</h3>
        <p class="mb-4 leading-[2] font-normal text-sm tracking-[0px] font-secondary">
          Refresh and hydrate skin with hard working ingredients. This smoothing and soothing formula helps to whisk
          away dead skin cells and blemish-causing oil without harsh scrubbing or alcohol. Minimizes appearance of
          pores, enhances skin & improves areas of dry, flaky skin.
        </p>
        <p class="mb-4 leading-[2] font-normal text-base">TAKE BETTER CARE<sup>&trade;</sup></p>
      </div>
      <div class="accordion">
        <div class="accordion-item">
          <div class="accordion-header">
            <h3 class="font-secondary">Key Ingredients</h3>
            <div class="x-icon"></div>
          </div>
          <div class="accordion-content">
            <ul>
              <li class="font-secondary">AHAs</li>
              <li class="font-secondary">Witch Hazel</li>
              <li class="font-secondary">Glycolic Acid</li>
            </ul>
          </div>
        </div>
        <div class="accordion-item">
          <div class="accordion-header">
            <h3 class="font-secondary">Benefits</h3>
            <div class="x-icon"></div>
          </div>
          <div class="accordion-content">
            <ul>
              <li class="font-secondary">Tightens pore</li>
              <li class="font-secondary">Exfoliates, hydrates & brightens skin</li>
              <li class="font-secondary">
                Free from parabens and phthalates, cruelty free, formulated without sulfates and vegan
              </li>
            </ul>
          </div>
        </div>
        <div class="accordion-item">
          <div class="accordion-header">
            <h3 class="font-secondary">Scent Notes</h3>
            <div class="x-icon"></div>
          </div>
          <div class="accordion-content">
            <p class="font-secondary">Unscented</p>
          </div>
        </div>
        <div class="accordion-item">
          <div class="accordion-header">
            <h3 class="font-secondary">Full Ingredient List</h3>
            <div class="x-icon"></div>
          </div>
          <div class="accordion-content">
            <p class="font-secondary">
              Ingredients: Water, Hamamelis Virginiana (Witch Hazel) Water, Propanediol, Glycolic Acid, Lactic Acid,
              Ethoxydiglycol, Glycerin, Sodium Hydroxide, Sodium Hyaluronate, Tartaric Acid, Phytic Acid, Hibiscus
              Sabdariffa (Red Sorrel) Flower Extract, Gluconolactone, Phenoxyethanol, Ethylhexylglycerin, Benzoic Acid,
              Tocopherol.
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- END OF SINGLE PRODUCT -->

<style>
    /* ========== SINGLE PRODUCT THUMBS ========== */
    .main-display {
      position: relative;
      width: 100%;
      /* pick one approach: min-height or aspect-ratio */
      /* min-height: 320px; */
      {% comment %} aspect-ratio: 1 / 1; /* nice square; change if you want */ {% endcomment %}
      background: #f8f8f8; /* optional placeholder */

      display: block;
    }

    .main-display > img,
    .main-display > video,
    .main-display > iframe,
    .main-display > model-viewer {
      inset: 0;
      width: 100%;
      {% comment %} height: 100%; {% endcomment %}
       height: auto;
      object-fit: contain; /* matches your “object-contain” intent */
    }


    /* Horizontal strip */
    .thumbnails__wrapper {
      display: flex;
      gap: 8px;
      scroll-behavior: smooth;
      -webkit-overflow-scrolling: touch;
      list-style: none;
      padding: 0;
      margin: 0;
    }

    /* Default: 3 per view (<480px) */
    .thumbnail {
      flex: 0 0 calc((100% - (8px * 2)) / 3);
      border: 1px solid transparent;
      cursor: pointer;
      background: #f8f8f8; /* optional placeholder */

      aspect-ratio: 1 / 1;    /* make each thumb square (or pick another ratio) */
      overflow: hidden;
      display: block;
    }

    .thumbnail img,
    .thumbnail video,
    .thumbnail iframe,
    .thumbnail model-viewer,
    .thumbnail picture,
    .thumbnail .thumb-media,      /* if you wrap the media */
    .thumbnail > * {
      
      inset: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;          /* fills the square; crops edges */
      display: block;
    }

    .thumbnail.is-active {
      border-color: #212322;
    }


    /* Arrow look (optional) */
    .thumb-arrow {
      cursor: pointer; /* all arrows clickable by default */
    }

    .thumb-arrow.is-disabled {
      opacity: 0.35;
      pointer-events: none;
    }

    .scrollbar-hide {
      -ms-overflow-style: none;
      /* IE and Edge */
      scrollbar-width: none;
      /* Firefox */
    }

    .scrollbar-hide::-webkit-scrollbar {
      display: none;
      /* Chrome, Safari, Opera */
    }

    /* 480–640px: 4 per view */
    @media (min-width: 480px) and (max-width: 640px) {
      .thumbnail {
        flex: 0 0 calc((100% - (8px * 3)) / 4);
      }
    }

    /* 641–767px: 5 per view (still mobile for us) */
    @media (min-width: 641px) and (max-width: 767px) {
      .thumbnail {
        flex: 0 0 calc((100% - (8px * 4)) / 5);
      }
    }

    @media (min-width: 768px) {
      .thumbnail {
        flex: 0 0 auto;
      }

      /* column items keep natural height */
      /* Optional: dim disabled arrows */
      .thumb-arrow.is-disabled {
        opacity: 0.35;
        pointer-events: none;
      }
    }
</style>


<script>
  window.addEventListener('load', () => {
    const mainDisplay = document.querySelector('.main-display');
    const viewport = document.querySelector('.thumbs-viewport') || document.querySelector('.thumbnails__wrapper');
    const track = document.querySelector('.thumbnails__wrapper');
    const thumbs = Array.from(document.querySelectorAll('.thumbnail'));

    const thumbPrev = document.querySelector('.thumb-arrow.prev');
    const thumbNext = document.querySelector('.thumb-arrow.next');
    const mainPrev = document.querySelector('.main-arrow.prev');
    const mainNext = document.querySelector('.main-arrow.next');

    if (!mainDisplay || !viewport || !track || thumbs.length === 0) return;

    const GAP = 8;
    const ROWS_DESKTOP = 6;

    const isVertical = () => window.innerWidth >= 768;
    const visibleRows = () => Math.max(0, Math.min(ROWS_DESKTOP, thumbs.length));
    const perViewMobile = () => (window.innerWidth >= 641 ? 5 : window.innerWidth >= 480 ? 4 : 3);
    const perViewCurrent = () => (isVertical() ? ROWS_DESKTOP : perViewMobile());

    function unitSize() {
      const a = thumbs[0].getBoundingClientRect();
      let gap = GAP;
      if (thumbs[1]) {
        const b = thumbs[1].getBoundingClientRect();
        gap = isVertical() ? Math.max(0, b.top - a.bottom) : Math.max(0, b.left - a.right);
      }
      const size = isVertical() ? a.height : a.width;
      return { size, gap };
    }

    function ensureVisible(li) {
      const vr = viewport.getBoundingClientRect();
      const lr = li.getBoundingClientRect();
      if (isVertical()) {
        if (lr.top < vr.top) viewport.scrollBy({ top: lr.top - vr.top - GAP, behavior: 'smooth' });
        else if (lr.bottom > vr.bottom) viewport.scrollBy({ top: lr.bottom - vr.bottom + GAP, behavior: 'smooth' });
      } else {
        if (lr.left < vr.left) viewport.scrollBy({ left: lr.left - vr.left - GAP, behavior: 'smooth' });
        else if (lr.right > vr.right) viewport.scrollBy({ left: lr.right - vr.right + GAP, behavior: 'smooth' });
      }
    }

    function pageThumbs(dir) {
      const { size, gap } = unitSize();
      const step = perViewCurrent() * (size + gap);
      const delta = dir * step;
      if (isVertical()) viewport.scrollBy({ top: delta, behavior: 'smooth' });
      else viewport.scrollBy({ left: delta, behavior: 'smooth' });
    }

    function updateThumbArrows() {
      const eps = 1;
      if (!thumbPrev || !thumbNext) return;

      if (isVertical()) {
        const noOverflow = viewport.scrollHeight <= viewport.clientHeight + eps;
        if (noOverflow) return thumbPrev.classList.add('is-disabled'), thumbNext.classList.add('is-disabled');

        const max = Math.max(0, viewport.scrollHeight - viewport.clientHeight - eps);
        thumbPrev.classList.toggle('is-disabled', viewport.scrollTop <= eps);
        thumbNext.classList.toggle('is-disabled', viewport.scrollTop >= max);
      } else {
        const noOverflow = viewport.scrollWidth <= viewport.clientWidth + eps;
        if (noOverflow) return thumbPrev.classList.add('is-disabled'), thumbNext.classList.add('is-disabled');

        const max = Math.max(0, viewport.scrollWidth - viewport.clientWidth - eps);
        thumbPrev.classList.toggle('is-disabled', viewport.scrollLeft <= eps);
        thumbNext.classList.toggle('is-disabled', viewport.scrollLeft >= max);
      }
    }

    function setViewportHeight() {
      if (!isVertical()) {
        viewport.style.height = '';
        viewport.style.overflowY = '';
        return;
      }
      const rows = visibleRows();
      if (rows <= 0) {
        viewport.style.height = '0px';
        viewport.style.overflowY = 'hidden';
        return;
      }

      const { size, gap } = unitSize();
      const gapsCount = Math.max(0, rows - 1);
      const h = rows * size + gapsCount * gap;

      viewport.style.height = `${Math.max(0, h)}px`;

      if (thumbs.length > rows) {
        viewport.style.overflowY = 'auto';
      } else {
        viewport.style.overflowY = 'hidden';
        viewport.scrollTop = 0;
      }
    }

    let currentIndex = 0;

    function renderMainFromThumb(li) {
      const tpl = li.querySelector('template.full-media');
      if (!tpl) return;

      mainDisplay.innerHTML = '';
      const node = tpl.content.cloneNode(true);
      mainDisplay.appendChild(node);

      // optional: if the media is a <video>, don’t auto-play unless you want to
      const vid = mainDisplay.querySelector('video');
      if (vid) {
        vid.pause();
        vid.currentTime = 0;
        vid.play(); // enable if you want auto-play
      }
    }

    function setActiveByIndex(index) {
      if (index < 0) index = thumbs.length - 1;
      if (index >= thumbs.length) index = 0;
      currentIndex = index;

      thumbs.forEach((t) => t.classList.remove('is-active'));
      const li = thumbs[index];
      li.classList.add('is-active');

      renderMainFromThumb(li);
      ensureVisible(li);
    }

    // init
    setActiveByIndex(0);

    // click a thumb
    thumbs.forEach((li, i) => li.addEventListener('click', () => setActiveByIndex(i)));

    // main-prev/next
    mainPrev?.addEventListener('click', (e) => {
      e.preventDefault();
      setActiveByIndex(currentIndex - 1);
    });
    mainNext?.addEventListener('click', (e) => {
      e.preventDefault();
      setActiveByIndex(currentIndex + 1);
    });

    // thumbs paging
    thumbPrev?.addEventListener('click', (e) => {
      e.preventDefault();
      if (!thumbPrev.classList.contains('is-disabled')) pageThumbs(-1);
    });
    thumbNext?.addEventListener('click', (e) => {
      e.preventDefault();
      if (!thumbNext.classList.contains('is-disabled')) pageThumbs(1);
    });

    viewport.addEventListener('scroll', updateThumbArrows);

    let raf;
    function refresh() {
      cancelAnimationFrame(raf);
      raf = requestAnimationFrame(() => {
        setViewportHeight();
        updateThumbArrows();
      });
    }
    window.addEventListener('resize', refresh);
    window.addEventListener('load', () => setTimeout(refresh, 0));
    refresh();
  });
</script>
